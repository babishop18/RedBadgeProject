// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedBadgeMVC.Data;

#nullable disable

namespace RedBadgeMVC.Migrations
{
    [DbContext(typeof(RedBadgeProjectDbContext))]
    [Migration("20230517035102_Migrations")]
    partial class Migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.ApplicationEntity", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppId"), 1L, 1);

                    b.Property<int>("ApplicantFKey")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateSubmitted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DesiredPay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasResponse")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("ResponseId")
                        .HasColumnType("int");

                    b.HasKey("AppId");

                    b.HasIndex("ApplicantFKey");

                    b.HasIndex("JobId");

                    b.HasIndex("ResponseId");

                    b.ToTable("ApplicationEntity");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.JobEntity", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"), 1L, 1);

                    b.Property<int>("CompanyFKey")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateJobPosted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobHourlyPay")
                        .HasColumnType("int");

                    b.Property<bool>("JobIsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobSalary")
                        .HasColumnType("int");

                    b.Property<string>("JobSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyFKey");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.ResponseEntity", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"), 1L, 1);

                    b.Property<int>("AppFKey")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateResponded")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponseId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserEntity");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.ApplicantEntity", b =>
                {
                    b.HasBaseType("RedBadgeMVC.Data.Entities.UserEntity");

                    b.Property<int>("ApplicantAge")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicantEntity");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.CompanyEntity", b =>
                {
                    b.HasBaseType("RedBadgeMVC.Data.Entities.UserEntity");

                    b.Property<string>("CompanyCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CompanyEntity");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.ApplicationEntity", b =>
                {
                    b.HasOne("RedBadgeMVC.Data.Entities.ApplicantEntity", "Applicant")
                        .WithMany("UserApps")
                        .HasForeignKey("ApplicantFKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedBadgeMVC.Data.Entities.JobEntity", "Job")
                        .WithMany("JobApps")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedBadgeMVC.Data.Entities.ResponseEntity", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Job");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.JobEntity", b =>
                {
                    b.HasOne("RedBadgeMVC.Data.Entities.CompanyEntity", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyFKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.JobEntity", b =>
                {
                    b.Navigation("JobApps");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.ApplicantEntity", b =>
                {
                    b.Navigation("UserApps");
                });

            modelBuilder.Entity("RedBadgeMVC.Data.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
